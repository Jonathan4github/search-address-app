{"version":3,"sources":["components/navbar/style.js","components/navbar/index.js","pages/Addresses/style.js","components/address-item/style.js","components/address-item/index.js","components/address-list/style.js","components/address-list/index.js","components/pagination/style.js","components/pagination/index.js","pages/Addresses/AddressPage.js","components/address-detail/style.js","components/address-detail/index.js","pages/DetailPage.js","App.js","serviceWorker.js","index.js"],"names":["Nav","styled","div","Heading","h1","StyledLink","Link","Navbar","to","Input","input","Button","button","List","ul","AddressTitle","AddressScore","withRouter","address","score","id","history","key","onClick","push","ListItem","li","AddressList","addresses","loading","docs","searchResult","undefined","map","doc","weergavenaam","Wrapper","Pagination","page","handlePage","AddressPage","useState","itemsPerPage","searchQuery","setAddresses","setLoading","fetchAddresses","a","async","start","fetch","res","json","addressData","prevState","response","useEffect","numFound","type","placeholder","onChange","e","data","target","value","preventDefault","pageNum","AddressContainer","AddressContent","AddressDetail","console","log","Object","keys","index","DetailsComponent","props","match","params","setAddress","details","App","className","exact","path","component","SearchDetail","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c6a5f166.chunk.js","sourcesContent":["import styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Nav = styled.div`\r\n  padding: 10px 20px;\r\n  text-align: center;\r\n  background: #6d3d6d;\r\n`;\r\n\r\nconst Heading = styled.h1`\r\n  margin: 10px 0;\r\n`;\r\n\r\nconst StyledLink = styled(Link)`\r\n  color: white;\r\n  align: left;\r\n`;\r\n\r\nexport { Nav, Heading, StyledLink };\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { Nav, Heading, StyledLink } from './style';\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <Nav>\r\n      <Heading>Dutch government find address APP</Heading>\r\n      <StyledLink to='/'>Home</StyledLink>\r\n    </Nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import styled from 'styled-components';\r\n\r\nconst Input = styled.input`\r\n  width: 70%;\r\n  padding: 10px;\r\n  box-sizing: border-box;\r\n  margin: 6px 2px 7px 25px;\r\n  background: #3c1f3c;\r\n  color: #fff;\r\n  border: 0;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  width: 20%;\r\n  padding: 10px;\r\n  box-sizing: border-box;\r\n  margin: 6px 0;\r\n  background: purple;\r\n  color: #fff;\r\n  border: 0;\r\n  margin-left: 4px;\r\n  &:hover {\r\n    opacity: 0.7;\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nexport { Button, Input };\r\n","import styled from 'styled-components';\r\n\r\nconst List = styled.ul`\r\n  padding: 0;\r\n  list-style-type: none;\r\n`;\r\n\r\nconst AddressTitle = styled.div`\r\n  font-weight: bold;\r\n  color: #fff;\r\n  font-size: 1.2em;\r\n`;\r\n\r\nconst AddressScore = styled.div`\r\n  font-size: 0.9em;\r\n  color: #ddd;\r\n`;\r\n\r\nexport { List, AddressTitle, AddressScore };\r\n","import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nimport { List, AddressTitle, AddressScore } from './style';\r\n\r\nconst AddressItem = ({ address, score, id, history }) => {\r\n  return (\r\n    <List key={id} onClick={() => history.push(`search/${id}`)}>\r\n      <AddressTitle>{address}</AddressTitle>\r\n      <AddressScore>{score}</AddressScore>\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default withRouter(AddressItem);\r\n","import styled from 'styled-components';\r\n\r\nconst List = styled.ul`\r\n  padding: 0;\r\n  list-style-type: none;\r\n`;\r\n\r\nconst ListItem = styled.li`\r\n  background: #6d3d6d;\r\n  border-radius: 4px;\r\n  padding: 10px;\r\n  cursor: pointer;\r\n  margin: 10px 0;\r\n\r\n  &:hover {\r\n    opacity: 0.7;\r\n  }\r\n`;\r\n\r\nexport { List, ListItem };\r\n","import React from 'react';\r\n\r\nimport AddressItem from '../address-item';\r\n\r\nimport { List, ListItem } from './style';\r\n\r\nconst AddressList = ({ addresses, loading }) => {\r\n  const { docs } = addresses.searchResult;\r\n  if (loading || docs === undefined) {\r\n    return <h2>Loading...</h2>;\r\n  }\r\n  return (\r\n    <List>\r\n      {docs.map(doc => (\r\n        <ListItem key={doc.id}>\r\n          <AddressItem score={doc.score} address={doc.weergavenaam} id={doc.id} />\r\n        </ListItem>\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default AddressList;\r\n","import styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\n  color: black;\r\n  float: left;\r\n  padding: 8px 16px;\r\n  text-decoration: none;\r\n  &:hover {\r\n    background: purple;\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  display: inline-block;\r\n`;\r\n\r\nexport { Button, Wrapper };\r\n","import React from 'react';\r\n\r\nimport { Button, Wrapper } from './style';\r\n\r\nconst Pagination = ({ page, handlePage }) => {\r\n  return (\r\n    <Wrapper>\r\n      {page > 1 ? (\r\n        <Button\r\n          onClick={() => {\r\n            handlePage(page - 1);\r\n          }}\r\n        >\r\n          &laquo; Previous\r\n        </Button>\r\n      ) : null}\r\n      <Button\r\n        onClick={() => {\r\n          handlePage(page + 1);\r\n        }}\r\n      >\r\n        &raquo; Next\r\n      </Button>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nimport { Input, Button } from './style';\r\nimport AddressList from '../../components/address-list';\r\nimport Pagination from '../../components/pagination';\r\n\r\nconst AddressPage = () => {\r\n  const [addresses, setAddresses] = useState({\r\n    page: 1,\r\n    itemsPerPage: 10,\r\n    searchResult: {},\r\n    searchQuery: 'a'\r\n  });\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const onChangleHandler = e => {\r\n    let data = e.target.value;\r\n    setAddresses(prevState => ({ ...prevState, searchQuery: data }));\r\n    e.preventDefault();\r\n  };\r\n\r\n  const handlePage = pageNum => {\r\n    setAddresses(prevState => ({ ...prevState, page: pageNum }));\r\n    fetchAddresses(addresses);\r\n  };\r\n\r\n  const fetchAddresses = async addresses => {\r\n    const { page, itemsPerPage, searchQuery } = addresses;\r\n    const start = (page - 1) * itemsPerPage;\r\n\r\n    setLoading(true);\r\n    const res = await fetch(\r\n      `https://geodata.nationaalgeoregister.nl/locatieserver/v3/suggest?fq=type:adres&q=${searchQuery}&start=${start}&rows=${itemsPerPage}&fq=*:*`\r\n    );\r\n    const addressData = await res.json();\r\n    setAddresses(prevState => ({ ...prevState, searchResult: { ...addressData.response } }));\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchAddresses(addresses);\r\n  }, []);\r\n\r\n  if (!addresses) {\r\n    return <h1>Loading</h1>;\r\n  }\r\n\r\n  const { numFound } = addresses.searchResult;\r\n  const page = addresses.page;\r\n\r\n  return (\r\n    <div>\r\n      <Input type='search' placeholder='enter address' onChange={onChangleHandler} />\r\n      <Button onClick={() => fetchAddresses(addresses)}>Click</Button>\r\n      <AddressList addresses={addresses} loading={loading} />\r\n      {numFound > 10 ? <Pagination numFound={numFound} page={page} handlePage={handlePage} /> : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddressPage;\r\n","import styled from 'styled-components';\r\n\r\nconst AddressContainer = styled.div`\r\n  padding: 2px;\r\n  list-style-type: none;\r\n  margin: 6px 3px 4px 14px;\r\n`;\r\n\r\nconst AddressTitle = styled.div`\r\n  font-weight: bold;\r\n  color: #fff;\r\n  font-size: 1em;\r\n`;\r\n\r\nconst AddressContent = styled.div`\r\n  font-size: 0.9em;\r\n  color: #ddd;\r\n`;\r\n\r\nexport { AddressTitle, AddressContent, AddressContainer };\r\n","import React from 'react';\r\n\r\nimport { AddressContainer, AddressTitle, AddressContent } from './style';\r\n\r\nconst AddressDetail = ({ address, loading }) => {\r\n  console.log(address[0]);\r\n\r\n  const keys = Object.keys(address[0]);\r\n  return keys.map((key, index) => {\r\n    return (\r\n      <AddressContainer key={index}>\r\n        <AddressTitle>{key}</AddressTitle>\r\n        <AddressContent>{address[0][`${key}`]}</AddressContent>\r\n      </AddressContainer>\r\n    );\r\n  });\r\n};\r\n\r\nexport default AddressDetail;\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport AddressDetail from '../components/address-detail';\r\n\r\nconst DetailsComponent = props => {\r\n  const { id } = props.match.params;\r\n  const [address, setAddress] = useState({});\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchAddresses = async id => {\r\n      setLoading(true);\r\n      const res = await fetch(\r\n        `https://geodata.nationaalgeoregister.nl/locatieserver/v3/lookup?id=${id}`\r\n      );\r\n      const addressData = await res.json();\r\n      setAddress(prevState => ({ ...prevState, details: { ...addressData.response } }));\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchAddresses(id);\r\n  }, []);\r\n\r\n  if (loading || address.details === undefined) {\r\n    return <h1>Loading</h1>;\r\n  }\r\n\r\n  const { docs } = address.details;\r\n\r\n  return <AddressDetail address={docs} loading={loading} />;\r\n};\r\n\r\nexport default DetailsComponent;\r\n","import React from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\n\nimport Navbar from '../src/components/navbar';\nimport AddressPage from './pages/Addresses/AddressPage';\nimport SearchDetail from './pages/DetailPage';\n\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div className='App'>\n      <BrowserRouter>\n        <Navbar />\n        <Route exact path='/' component={AddressPage} />\n        <Route path='/search/:id' component={SearchDetail} />\n      </BrowserRouter>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}